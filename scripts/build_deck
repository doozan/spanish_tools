#!/usr/bin/python3
# -*- python-mode -*-

import argparse
import csv
import genanki
import html
import json
import math
import os
import re
import sqlite3
import sys
from Levenshtein import distance as fuzzy_distance

from spanish_tools.sentences import SpanishSentences
from spanish_tools.deckbuilder import DeckBuilder
from spanish_tools.freq import NgramPosProbability
from enwiktionary_wordlist.wordlist import Wordlist
from enwiktionary_wordlist.all_forms import AllForms

def build_deck(params=None):

    parser = argparse.ArgumentParser(description="Compile anki deck")
    parser.add_argument("deckfile", help="Name of deck to build")
    parser.add_argument(
        "-m",
        "--mediadir",
        help="Directory containing deck media resources (default: DECKFILE.media)",
    )
    parser.add_argument(
        "-w",
        "--wordlist",
        action="append",
        help="List of words to include/exclude from the deck (default: DECKFILE.csv)",
    )
    parser.add_argument(
        "-t",
        "--tag",
        action="append",
        help="Add specified to to all notes (can be declared multiple times)",
    )
    parser.add_argument(
        "--allow-flag",
        action="append",
        help="Include wordlist items even if they have specificed flag (can be declared multiple times)"
    )
    parser.add_argument(
        "--short-defs",
        help="CSV file with short definitions (default DECKFILE.shortdefs)",
    )
    parser.add_argument("-l", "--limit", type=int, help="Limit deck to N entries")
    parser.add_argument(
        "--dump-sentence-ids", help="Dump high scoring sentence ids to file"
    )
    parser.add_argument("--dump-credits", help="Dump high scoring sentence ids to file")
    parser.add_argument("--dump-notes", help="Dump notes to file")
    parser.add_argument(
        "--dump-changes", help="Dump list of removed/added note ids to file (requires --anki)"
    )
    parser.add_argument( "--model", help="Read model info from JSON file", required=True)
    parser.add_argument("--deck-name", help="Deck Name", default="Deck")
    parser.add_argument("--deck-guid", help="Deck GUID", required=True, type=int)
    parser.add_argument("--deck-desc", help="Deck Description", default="")
    parser.add_argument("--anki", help="Read/write data from specified anki profile")
    parser.add_argument("--allforms", help="Load word forms from file")
    parser.add_argument("--ngprobs", help="NGprobs file", required=True)
    parser.add_argument(
        "--dictionary", help="Dictionary file name (DEFAULT: es-en.txt)",
        default="es-en.txt"
    )
    parser.add_argument(
        "--dictionary-custom", help="File containing dictionary customizations"
    )
    parser.add_argument(
        "--sentences", help="Sentences file name (DEFAULT: sentences.tsv)",
        default="sentences.tsv"
    )
    parser.add_argument(
        "--sentences-preferred"
        help="Data file with preferred sentence ids",
        action="append",
    )
    parser.add_argument(
        "--sentences-forced"
        help="Data file with forced sentence ids",
        action="append",
    )
    parser.add_argument(
        "--sentences-ignored"
        help="Data file with ignored sentence ids",
        action="append",
    )
    parser.add_argument(
        "--sentences-tagfixes"
        help="Data file with sentence tag overrides",
        action="append",
    )
    parser.add_argument(
        "--custom-dir",
        help="Directory containing dictionary customizations (DEFAULT: SPANISH_CUSTOM_DIR environment variable or 'spanish_custom')",
    )
    parser.add_argument("--low-mem", help="Use less memory", action='store_true', default=False)
    args = parser.parse_args(params)

    if args.tag:
        for tag in args.tag:
            if not re.match("^[0-9a-zA-Z_]+$", tag):
                print(f"Invalid tag: '{tag}'. May only contain alphanumerics + _")
                exit(1)
    else:
        args.tag = []

    if not args.mediadir:
        args.mediadir = args.deckfile + ".media"

    if not args.wordlist:
        args.wordlist = [args.deckfile + ".csv"]

    if not args.short_defs and os.path.isfile(args.deckfile + ".shortdefs"):
        args.short_defs = args.deckfile + ".shortdefs"

    if not args.allow_flag:
        args.allow_flag = set()

    if not os.path.isdir(args.mediadir):
        print(f"Deck directory does not exist: {args.mediadir}")
        exit(1)

    for wordlist in args.wordlist:
        wordlist = wordlist.split(";")[0]
        if not os.path.isfile(wordlist):
            print(f"Wordlist file does not exist: {wordlist}")
            exit(1)

    if args.dump_changes and not args.anki:
        print("Use of --dump-changes requires --anki profile to be specified")
        exit(1)

    if not os.path.isfile(args.model):
        print(f"Model JSON does not exist: {args.model}")
        exit(1)

    dictionary = Wordlist.from_file(args.dictionary, cache_words=not args.low_mem)

    if args.allforms:
        allforms = AllForms.from_file(args.allforms)
    else:
        allforms = AllForms.from_wordlist(wordlist)

    ignore = DeckBuilder.load_ignore(args.dictionary_custom)

    sentences = SpanishSentences(
        sentences=args.sentences,
        preferred=args.sentences_preferred,
        forced=args.sentences_forced,
        ignored=args.sentences_ignored,
        tagfixes=args.sentences_tagfixes
    )
    shortdefs = DeckBuilder.load_shortdefs(args.short_defs)

    ngprobs = NgramPosProbability(args.ngprobs)

    deck = DeckBuilder(dictionary, sentences, ignore, allforms, shortdefs, ngprobs)
    deck.load_wordlists(args.wordlist, args.allow_flag)
    deck.compile(args.model, args.deckfile, args.deck_name, args.deck_guid, args.deck_desc, args.mediadir, args.limit, args.anki, args.tag)

    if args.dump_sentence_ids:
        deck.dump_sentences(args.dump_sentence_ids)

    if args.dump_notes:
        with open(args.dump_notes, "w", newline="") as outfile:
            csvwriter = csv.writer(outfile)

            fields = deck._fields+["tags"]
            #del fields[7]  # audio
            #del fields[0]  # rank
            csvwriter.writerow(fields)

            for row in deck.rows:
                #del row[7]
                #del row[0]
                csvwriter.writerow(row)

    if args.dump_changes:
        with open(args.dump_changes, "w") as outfile:
            changes = []
            for guid in deck.db_notes.keys() - deck.notes.keys():
                changes.append((int(deck.db_notes[guid]["nid"]), deck.db_notes[guid]["word"], guid, "-"))
            for guid in deck.notes.keys() - deck.db_notes.keys():
                changes.append((int(deck.notes[guid]["Rank"]), f'{deck.notes[guid]["Part of Speech"]} {deck.notes[guid]["Spanish"]}', guid, "+"))

            for rank, word, guid, change in sorted(changes):
                outfile.write(f'{change}{rank} {word} {guid}\n')

            if len(changes):
                print(f'{len(changes)} words added/subtracted, {len(deck.db_notes)} items in db, {len(deck.notes)} items in deck')


    if args.dump_credits:
        deck.dump_credits(args.dump_credits)

if __name__ == "__main__":
    build_deck(sys.argv[1:])
