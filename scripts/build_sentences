#!/usr/bin/python3
# -*- python-mode -*-

import argparse
import os

from enwiktionary_wordlist.wordlist import Wordlist
from enwiktionary_wordlist.all_forms import AllForms
from spanish_tools.freq import FrequencyList
from spanish_tools.freq import NgramPosProbability
from spanish_tools.sentences import SentenceBuilder
from ngram.ngramdb import NgramDB

def main():
    parser = argparse.ArgumentParser(description="Manage tagged sentences")
    parser.add_argument(
        "sentences",
        default="spa.txt",
        help="Master sentences file with spanish/english sentences (default spa.txt)",
    )
    parser.add_argument("--credits", action="store_true", help="Print sentence credits only")
    parser.add_argument("--tags", nargs=1, help="Merged tagged data with original data")
    parser.add_argument("--dictionary", help="Dictionary file", required=True)
    parser.add_argument("--allforms", help="Load word forms from file")
    parser.add_argument("--ngprobs", help="Ngram probability data file", required=True)
    parser.add_argument("--ngcase", help="Ngram case probability data file", required=True)
    parser.add_argument("--ngramdb", help="Ngram database", required=True)
    parser.add_argument("--low-mem", help="Use less memory", action='store_true', default=False)
    parser.add_argument('--verb-rank', action='store_true')
    parser.add_argument('--verbose', action='store_true')
    args = parser.parse_args()

    ngprobs = NgramPosProbability(args.ngprobs, args.ngcase)

    if not os.path.isfile(args.sentences):
        raise FileNotFoundError(f"Cannot open: {args.sentences}")

    if args.tags and not os.path.isfile(args.tags[0]):
        raise FileNotFoundError(f"Cannot open: {args.tags}")

    cache_words = not args.low_mem
    with open(args.dictionary) as infile:
        wordlist = Wordlist(infile, cache_words=cache_words)

    if args.allforms:
        allforms = AllForms.from_file(args.allforms)
    else:
        allforms = AllForms.from_wordlist(wordlist)

    freq = FrequencyList(wordlist, allforms, ngprobs)

    ngramdb = NgramDB(args.ngramdb)

    builder = SentenceBuilder(allforms, freq, ngramdb)

    if args.credits:
        builder.print_credits(args.sentences)
    elif args.tags:
        builder.print_tagged_data(args.sentences, args.tags[0], args.verb_rank, args.verbose)
    else:
        builder.print_untagged_sentences(args.sentences)

if __name__ == "__main__":
    main()
